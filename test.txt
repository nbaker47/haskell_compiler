

eval (While (Less (V "x") (N 5)) (Assign "x" ( Plus ( V "x" ) (N 1)))) (fromList [( "x" ,0)])


eval (If (Less ( V "x" ) (N 5)) (Assign "x" (N 6)) (SKIP))(fromList [("x" ,10)])

eval (Seq (Assign "x" (N 5) ) (Assign "x" (N 6)  )) (fromList [("x",0)])

acomp (Plus (N 5) (V "x" )

bcomp(Bc False ) False 3

bcomp (And (Bc False) (Less (V "x") (N 5))) False 3

bcomp (Less (V "x") (N 5) ) True 3

bcomp (And (Less (V "x" ) (N 5)) ( Bc True )) False 3



bcomp(And(Bc False)(Bc True))True 3  !!ERROR

bcomp(And(Bc True)(Bc False))True 3



bcomp(And(Bc False)(Less(V "x")(N 5))) True 3

bcomp(And(Bc False) (Less (V "x") (N 5))) False 3






compiler:
ccomp(If(Less(V"u")(N 1))(Assign"u"(Plus(V "u")(N 1)))(Assign"v"(V "u")))

ccomp(While(Less(V "u")(N 1))(Assign "u"(Plus(V "u")(N 1))))


"Assign \"x\" (Plus (N 5)(N 3)) "

stack exec coursework-exe "Assign \"x\" (Plus (N 5)(N 3))"